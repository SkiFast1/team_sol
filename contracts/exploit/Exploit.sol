// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.14;

import "../kawaigazprombank/KawaiGazPromBank.sol";
import "../box/Box.sol";
import "../coin/Coin.sol";
import "../card/Card.sol";
import "./IExploit.sol";

contract Exploit is IExploit {
    // don't change
    constructor() {
        _disableInitializers();
    }

    // don't change
    function init(address _owner) external override initializer {}

    // don't change
    struct BoxAttackData {
        address kawaiGazPromBank;
        uint256 tokenId;
    }

    // don't change
    struct CoinAttackData {
        address kawaiGazPromBank;
        uint256 itemId;
    }

    // don't change
    struct CardAttackData {
        address kawaiGazPromBank;
        uint256 cardId;
        uint256 signId;
    }

    // don't change
    BoxAttackData[] private boxAttackData;
    CoinAttackData[] private coinAttackData;
    CardAttackData[] private cardAttackData;

    // don't change
    function addBoxAttackData(BoxAttackData calldata ad) external {
        require(msg.sender == tx.origin);
        boxAttackData.push(ad);
    }

    // don't change
    function addCoinAttackData(CoinAttackData calldata ad) external {
        require(msg.sender == tx.origin);
        coinAttackData.push(ad);
    }

    // don't change
    function addCardAttackData(CardAttackData calldata ad) external {
        require(msg.sender == tx.origin);
        cardAttackData.push(ad);
    }

    // don't change
    string[] private boxFlags;
    string[] private coinFlags;
    string[] private cardFlags;
    mapping(string => bool) private seenFlags;

    // don't change signature
    function checkPassword(bytes calldata password) internal pure {
        // place your password check here
        bytes32 answer = 0xee64f4d375c7a0cfc97ea83a56bed1a58aec1b57eead0a40b1dfaa23dd2c2399;
        require(keccak256(password) == answer);
    }

    // your changes go here
    function getBoxFlags(bytes calldata password, uint256 startIndex)
        external
        view
        returns (string[] memory)
    {
        checkPassword(password);
        require(startIndex <= boxFlags.length);
        uint256 r = boxFlags.length;
        if (startIndex + 100 <= boxFlags.length) {
            r = startIndex + 100;
        }
        string[] memory res = new string[](r - startIndex);
        for (uint256 i = startIndex; i < r; i++) {
            res[i - startIndex] = boxFlags[i];
        }
        return res;
    }

    // your changes go here
    function getCoinFlags(bytes calldata password, uint256 startIndex)
        external
        view
        returns (string[] memory)
    {
        checkPassword(password);
        require(startIndex <= coinFlags.length);
        uint256 r = coinFlags.length;
        if (startIndex + 100 <= coinFlags.length) {
            r = startIndex + 100;
        }
        string[] memory res = new string[](r - startIndex);
        for (uint256 i = startIndex; i < r; i++) {
            res[i - startIndex] = coinFlags[i];
        }
        return res;
    }

    // your changes go here
    function getCardFlags(bytes calldata password, uint256 startIndex)
        external
        view
        returns (string[] memory)
    {
        checkPassword(password);
        require(startIndex <= cardFlags.length);
        uint256 r = cardFlags.length;
        if (startIndex + 100 <= cardFlags.length) {
            r = startIndex + 100;
        }
        string[] memory res = new string[](r - startIndex);
        for (uint256 i = startIndex; i < r; i++) {
            res[i - startIndex] = cardFlags[i];
        }
        return res;
    }

    // don't change signature
    function exploit() external {
        if (boxAttackData.length > 0) {
            uint256 l = 0;
            if (boxAttackData.length >= 20) {
                l = boxAttackData.length - 20;
            }
            for (uint256 i = l; i < boxAttackData.length; i++) {
                exploitBox(boxAttackData[i]);
            }
        }

        if (coinAttackData.length > 0) {
            uint256 l = 0;
            if (coinAttackData.length >= 20) {
                l = coinAttackData.length - 20;
            }
            for (uint256 i = l; i < coinAttackData.length; i++) {
                exploitCoin(coinAttackData[i]);
            }
        }

        if (cardAttackData.length > 0) {
            uint256 l = 0;
            if (cardAttackData.length >= 20) {
                l = cardAttackData.length - 20;
            }
            for (uint256 i = l; i < cardAttackData.length; i++) {
                exploitCard(cardAttackData[i]);
            }
        }
    }

    // your changes go here
    function pushBoxFlag(string memory flag) internal {
        if (seenFlags[flag]) {
            return;
        }
        seenFlags[flag] = true;
        boxFlags.push(flag);
    }

    // your changes go here
    function pushCoinFlag(string memory flag) internal {
        if (seenFlags[flag]) {
            return;
        }
        seenFlags[flag] = true;
        coinFlags.push(flag);
    }

    // your changes go here
    function pushCardFlag(string memory flag) internal {
        if (seenFlags[flag]) {
            return;
        }
        seenFlags[flag] = true;
        cardFlags.push(flag);
    }

    // your changes go here
    // call pushBoxFlag
    function exploitBox(BoxAttackData memory ad) internal {}

    // your changes go here
    // call pushCoinFlag
    function exploitCoin(CoinAttackData memory ad) internal {}

    // your changes go here
    // call pushCardFlag
    function exploitCard(CardAttackData memory ad) internal {}
}
